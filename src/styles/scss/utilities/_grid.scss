// GRID

@use 'sass:math';
@use 'sass:map';

$grid-breakpoints: (
  'xxs': 0,
  'xs': 420px,
  'sm': 576px,
  'md': 768px,
  'lg': 992px,
  'xl': 1200px,
  'xxl': 1400px,
);

$container-max-widths: (
  'xs': 400px,
  'sm': 540px,
  'md': 720px,
  'lg': 960px,
  'xl': 1140px,
  'xxl': 1320px,
);

$grid-gaps: (
  '0': 0,
  '1': $grid-gap,
  '2': $grid-gap * 2,
  '3': $grid-gap * 4,
);
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

.row {
  display: flex;
  flex-flow: row wrap;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin make-container($grid-gap: $grid-gap) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: math.div($grid-gap, 2);
  padding-left: math.div($grid-gap, 2);
  box-sizing: border-box;
}

.container,
.container-fluid {
  @include make-container();
}

@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }
  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }
    $create-containers: true;
    @each $name, $width in $grid-breakpoints {
      @if ($create-containers) {
        .container#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }
        @if ($breakpoint == $name) {
          $create-containers: false;
        }
      }
    }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @if $grid-columns > 0 {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      @for $i from 1 through $grid-columns {
        .col#{breakpoint-infix($breakpoint, $grid-breakpoints)}-#{$i} {
          box-sizing: border-box;
          flex-grow: 0;
          width: math.div($i * 100%, $grid-columns);
        }
      }
    }
  }
}
